1. Convert a string as given in the format below:

Example:
aabbb into a2b3
aaaa into a4
a into a1

import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;

public class firstOne {
    public static String findStringCount(String input){
        StringBuilder sb= new StringBuilder();
        HashMap<Character,Integer> hashMap = new LinkedHashMap<>();
        for(int i=0;i<input.length();i++){
            char in=input.charAt(i);
            if(hashMap.containsKey(in)){
               int count=hashMap.get(in);
               hashMap.put(in,++count);
            }
            else{
                hashMap.put(in,1);
            }

        }
        for(Map.Entry<Character,Integer> entry: hashMap.entrySet()){
            sb.append(entry.getKey()).append(entry.getValue());
        }
        return sb.toString();
    }
    public static void main(String[] args) {
        String a="aabbb";
        String b="aaaa";
        String c="a";
        System.out.println(findStringCount(a));
        System.out.println(findStringCount(b));
        System.out.println(findStringCount(c));
    }
}


2. Given a dictionary (list of words) and a substring, you have to return the length of the longest word in the dictinary containing the substring.

Example:
String[] dict = {"CODGE", "ODG", "LODGES", "SODG", "dodge", "mODJ", "LODGESSSS"};
String toSearch = "ODG";

//Returns 9 (LODGESSSS)


public class SecondOne {
    public static int findPrefixCount(String[] dict, String toSearch){
       int maxLength=0;
        for(String word: dict){
            if(word.contains(toSearch)){
                maxLength=Math.max(maxLength,word.length());
            }
        }
        return maxLength;
    }
    public static void main(String[] args) {
        String[] dict = {"CODGE", "ODG", "LODGES", "SODG", "dodge", "mODJ", "LODGESSSS"};
        String toSearch = "ODG";
        System.out.println(findPrefixCount(dict,toSearch));
    }
}


3. Prefix Search
    Given a document and a prefix, return all the words starting with the prefix.

Example:
Say the document is a string of words,
    String[] arr = {"apple", "applet", "bread", "aper"};
    String prefix = "app";

    // Return apple, applet

public class thridOne {
    public static String findStringSearch(String[] input,String prefix){
        StringBuilder sb= new StringBuilder();
        for(String word: input){
            if(word.contains(prefix)){
                sb.append(word).append(" ");
            }
        }
        return sb.toString();
    }
    public static void main(String[] args) {
        String[] arr = {"apple", "applet", "bread", "aper"};
        String prefix = "app";
        System.out.println(findStringSearch(arr,prefix));
    }
}


4. Given a sentence/phrase and two words,
    return the minimum distance between the words.

Example:
    String str = “the quick the brown quick brown the frog”
    String word1 = “quick”
    String word2 = "frog"

    //Return 2

import java.util.HashMap;

public class fourthOne {
    public static int minDistanceSentence(String str,String word1,String word2) {
        int minDistance = Integer.MAX_VALUE;
        int index1 = -1;
        int index2 = -1;
        String[] sentence = str.split(" ");
        for (int i = 0; i < sentence.length; i++) {
            if (sentence[i].equals(word1)) {
                index1 = i;
                if (index1 != -1) {
                    minDistance = Math.min(minDistance, (index1 - index2));
                }
            } else if (sentence[i].equals(word2)) {
                index2 = i;
                if (index2 != -1) {
                    minDistance = Math.min(minDistance, (index2 - index1));
                }
            }
        }
        return minDistance == Integer.MAX_VALUE ? -1 : minDistance;
    }

    public static void main(String[] args) {
        String str = "the quick the brown quick brown the frog";
        String word1 = "quick";
        String word2 = "frog";
        System.out.println(minDistanceSentence(str,word1,word2));
    }
}


5. Given a string,
    return the first non-repeating character.

Examples:
String str1 = "12345"
    //Return 1

String str2 = "abbacd"
    //Return c


import java.util.HashMap;
import java.util.Map;

public class fifthOne {
    public static String firstNonRepeatingCharacter(String input){
        HashMap<Character,Integer> hashMap = new HashMap<>();
        for(char c: input.toCharArray()){
                hashMap.put(c,hashMap.getOrDefault(c,0)+1);
        }
        for(Map.Entry<Character,Integer> map : hashMap.entrySet()){
            if(map.getValue()==1){
                return map.getKey().toString();
            }
        }
    return "0";
    }
    public static void main(String[] args) {
        String str1 = "12345";
        String str2 = "abbacd";
        System.out.println(firstNonRepeatingCharacter(str1));
        System.out.println(firstNonRepeatingCharacter(str2));
    }
}


6. Given a sorted rotated array,
    return the minimum element from it.

Examples:
    int[] arr1 = {5, 6, 1, 2, 3, 4};    //Return 1

    int[] arr2 = {1, 2, 3, 4};            //Return 1


public class SixthOne {
    public static int minSortArray(int[] input){
        int minArr=input[0];
        for(int num: input){
            if(num<minArr) {
                minArr = num;
            }
        }
        return minArr;
    }
    public static void main(String[] args) {
        int[] arr1 = {5, 6, 1, 2, 3, 4};
        int[] arr2 = {1, 2, 3, 4};
        System.out.println(minSortArray(arr1));
        System.out.println(minSortArray(arr2));

    }
}


7. A staircase with n steps is given. Starting from the base,
    return the number of ways of reaching the n’th stair.

    [The person can climb either 1 or 2 stairs in one move]. 

public class SeventhOne {
    public static int stairCaseSteps(int n){
        int[] steps = new int[n+1];
        steps[0]=1;
        steps[1]=1;
        for(int i=2;i<=n;i++){
            steps[i] = steps[i-1]+steps[i-2];
        }
        return steps[n];
    }
    public static void main(String[] args) {
        int n=5;
        System.out.println(stairCaseSteps(n));
    }
}


8. Given a list of student names and corresponding marks,
    return the highest average marks (and print the corresponding student name - optional).
    The marks can be negative as well and a student may have multiple marks.

Example:
 String[][] = {{“Charles”, 84},
                      {“John”, 100},
                      {“Andy”, 37},
                      {“John”, 23},
                      {“Charles”, 20}};

    //Return 61.5 (which is of John's)

import java.util.HashMap;

public class EighthOne {
    public static void averageStudents(String[][] input){
        String result="";
        HashMap<String,Integer> total = new HashMap<>();
        HashMap<String,Integer> count= new HashMap<>();
        for(String[] data: input) {
            String student = data[0];
            int marks= Integer.parseInt(data[1]);
            total.put(student,total.getOrDefault(student,0)+marks);
            count.put(student,count.getOrDefault(student,0)+1);
        }
        double highestAverage=Double.NEGATIVE_INFINITY;
        for(String student: total.keySet()){
           double average= (double) total.get(student)/count.get(student);
            if(average>highestAverage){
                highestAverage = average;
                result= student;
            }
        }

        System.out.printf(String.valueOf(highestAverage));
        System.out.println(" "+result);
    }
    public static void main(String[] args) {
        String[][] str = {{"Charles","84"},
            {"John", "100"},
            {"Andy", "37"},
            {"John", "23"},
            {"Charles", "20"}};
        averageStudents(str);
    }
}


9. Given an array of integers and a sum K,
    return the length of the shortest sub-array which matches the given sum. If it doesn't exist, return -1.
    [Even a single integer can be considered as a sum.]

Examples:
    int[] arr = {2, 4, 6, 10, 2, 1}, K = 12        // Return 2

    int[] arr = {5, 8, 50, 4}, K = 50                // Return 50 (A single integer may be considered as a sum)

public class NinethOne {
    public static int subArr(int[] input, int n){
        int start=0;
        int currentSum=0;
        int maxLength=Integer.MAX_VALUE;
        int maxSum=Integer.MAX_VALUE;
        boolean returnSum;

        for(int i=0;i<input.length;i++){
            currentSum +=input[i];

            while(currentSum>=n){
                int currentLength=i-start+1;

                if(currentLength<maxLength){
                 maxLength=currentLength;
                 maxSum=currentSum;
                }
                currentSum -=input[start];
                start++;
            }
        }
        if(maxLength==1){
            returnSum=true;
        }
        else{
            returnSum=false;
        }

        return returnSum?maxSum:maxLength;
    }
    public static void main(String[] args) {
        int[] arr = {2, 4, 6, 10, 2, 1};
        int K = 12;
        int[] arr1 = {5, 8, 50, 4};
        int K1 = 50;
        System.out.println(subArr(arr,K));
        System.out.println(subArr(arr1,K1));
    }
}



10. Given a dictionary (list of words) and a word,
    return an array of strings that can be formed from the given word.
    [Every letter in the input word can occur only once in the word to be returned].

Examples:
    String[] dict = {"ab", "abcd", "bcdaf", "bcad", "acb", "acab"};
    String input = "abcd";
    // Return {"abcd", "bcad"}

    String[] dict =  {"ab", "abcd", "bcdaf", "bcad", "acaab", "acab"};
    String input = "caab";
    // Return {"acab"}


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class TenthOne {
    public static String[] stringList(String[] input,String input1){
        List<String> list= new ArrayList<>();
        HashMap<Character,Integer> hashMap = new HashMap<>();
        for(char c: input1.toCharArray()){
            hashMap.put(c,hashMap.getOrDefault(c,0)+1);
        }
        for(String word: input){
            if(canFormWord(word,hashMap)){
                list.add(word);
            }
        }
        return list.toArray(new String[0]);
    }

    private static boolean canFormWord(String word,HashMap<Character,Integer> hashMap){
        HashMap<Character,Integer> hash= new HashMap<>();
        for(char e: word.toCharArray()){
            hash.put(e,hash.getOrDefault(e,0)+1);
        }
        for(char f:hash.keySet()){
            if(hash.get(f) > hashMap.getOrDefault(f,0)){
                return false;
            }
        }
return true;
    }
    public static void main(String[] args) {
        String[] dict = {"ab", "abcd", "bcdaf", "bcad", "acb", "acab"};
        String input = "abcd";
        String[] result=stringList(dict,input);
        System.out.println(String.join(", ",result));
    }
}

